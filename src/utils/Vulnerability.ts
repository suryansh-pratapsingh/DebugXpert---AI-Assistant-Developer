import * as vscode from 'vscode';
import { GoogleGenAI } from "@google/genai";

const ai = new GoogleGenAI({ apiKey: "AIzaSyBNP8L1vFKs_zrWQLRL32aoM9TO7GcInlM" });

export async function checkVulnerability(personalizationData: any) {
    const editor = vscode.window.activeTextEditor;
    if (!editor) {
        vscode.window.showErrorMessage("‚ùå No active editor found. Open a file to analyze.");
        return;
    }

    const code = editor.document.getText();
    
    try {
        vscode.window.showInformationMessage("üîç Analyzing code vulnerabilities...");

        const response = await ai.models.generateContent({
            model: "gemini-2.0-flash",
            contents: `Analyze the following code for security, scalability, and reliability risks:
            
            **Code:** 
            \`\`\`
            ${code}
            \`\`\`
            
            **Vulnerability Checks:**
            1. **Multiple Users Access Issues** (Race conditions, resource exhaustion)
            2. **Malicious Input Handling** (SQL injection, XSS, command injection)
            3. **Wrong Format Issues** (Unexpected data types, missing validation)
            4. **Denial of Service (DoS) Attacks** (Rate limiting, memory exhaustion)
            5. **Hacking Attacks** (Authentication bypass, unauthorized access)
            
            **Additional Context:**
            - Tech Stack: ${personalizationData.techStack}
            - Project Name: ${personalizationData.projectName}
            - System Username: ${personalizationData.systemUser}
            
            **References & Learning Resources:**
            - Provide **official documentation links** for security best practices, vulnerability mitigation, and secure coding guidelines.
            - Fetch **relevant blogs/articles** explaining these vulnerabilities with examples.
            - Find **YouTube videos** that demonstrate vulnerability testing, secure coding, and best practices.
            - Ensure all references are from trusted sources such as OWASP, NIST, Microsoft Security Blog, Google Developers, and academic security research papers.
            
            **Provide the response in Markdown format with headings, bullet points, code snippets, and clickable links.**
            `
        });

        const analysis = response?.text?.trim() || "No analysis received.";

        // Show analysis result in a well-styled WebView
        const panel = vscode.window.createWebviewPanel(
            'vulnerabilityAnalysis',
            'Code Vulnerability Analysis',
            vscode.ViewColumn.One,
            { enableScripts: true }
        );

        panel.webview.html = getStyledHTML(analysis);
    } catch (error) {
        vscode.window.showErrorMessage("‚ùå Error analyzing code: " + (error instanceof Error ? error.message : "Unknown error"));
    }
}

// Function to convert Markdown text to styled HTML for display with a download button
function getStyledHTML(markdownText: string): string {
    return `
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Code Vulnerability Analysis</title>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/marked/4.3.0/marked.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.70/pdfmake.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.70/vfs_fonts.js"></script>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css">
        <style>
            body {
                font-family: 'Arial', sans-serif;
                margin: 20px;
                padding: 20px;
                background-color: #1e1e1e;
                color: #ffffff;
            }
            h2 {
                color: #ff9800;
            }
            pre {
                background-color: #2d2d2d;
                padding: 10px;
                border-radius: 5px;
                overflow-x: auto;
            }
            code {
                font-family: "Courier New", monospace;
                color: #ffcc00;
            }
            .container {
                background: #252526;
                padding: 20px;
                border-radius: 10px;
                box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.3);
            }
            .button {
                background-color: #ff9800;
                color: white;
                border: none;
                padding: 10px 20px;
                text-align: center;
                font-size: 16px;
                margin-top: 20px;
                cursor: pointer;
                border-radius: 5px;
                display: inline-block;
            }
            .button:hover {
                background-color: #e68900;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h2>üîç Code Vulnerability Analysis</h2>
            <div id="markdown-content"></div>
            <button class="button" onclick="downloadPDF()">üì• Download as PDF</button>
        </div>

        <script>
            document.getElementById("markdown-content").innerHTML = marked.parse(\`${markdownText.replace(/`/g, "\\`")}\`);
            
            // Apply PrismJS Syntax Highlighting
            document.querySelectorAll("pre code").forEach((block) => {
                Prism.highlightElement(block);
            });

            function downloadPDF() {
                const content = document.getElementById("markdown-content").innerText;
                const docDefinition = {
                    content: [
                        { text: "Code Vulnerability Analysis", style: "header" },
                        { text: content, style: "body" }
                    ],
                    styles: {
                        header: {
                            fontSize: 18,
                            bold: true,
                            margin: [0, 0, 0, 10]
                        },
                        body: {
                            fontSize: 12
                        }
                    }
                };
                pdfMake.createPdf(docDefinition).download("Code_Vulnerability_Analysis.pdf");
            }
        </script>
    </body>
    </html>`;
}
